name: Docker Build & Publish

on:
  pull_request:
  push:
    branches:
      - main
      - release/*
    tags:
      - v*.*.*

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  docker-build:
    name: Build, Test & Publish Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to GitHub Container Registry (GHCR)
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Set Image Tag
        id: set_image_tag
        run: |
          IMAGE_TAG="ghcr.io/${{ github.repository_owner }}/opera_tropo"
          
          # Check if the event is a tag push or a branch push
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION_TAG="${GITHUB_REF##*/}"  # Extract version tag
            # Remove the leading 'v' if it's present
            VERSION_TAG="${VERSION_TAG#v}"
          else
            VERSION_TAG="${GITHUB_REF##*/}"  # Default fallback (if needed for branches)
            # Optionally, you could handle branch versions differently here
          fi

          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV

      - name: Build the Docker image
        run: |
          docker build --network=host \
            --tag ${{ env.IMAGE_TAG }}:${{ env.VERSION_TAG }} \
            --file=docker/Dockerfile .

      - name: Run a smoke test
        run: |
          docker run --rm ${{ env.IMAGE_TAG }}:${{ env.VERSION_TAG }} opera_tropo run --help

      - name: Push the Docker image to GHCR
        run: |
          docker push ${{ env.IMAGE_TAG }}:${{ env.VERSION_TAG }}

      - name: Save Docker image to a tar file
        run: |
          # Save the Docker image as a tar file
          docker save ${{ env.IMAGE_TAG }}:${{ env.VERSION_TAG }} > tropo_${{ env.VERSION_TAG }}.tar

      - name: Print download command
        run: |
          echo "âœ… Docker image published!"
          echo "To pull the image, run:"
          echo "docker pull ${{ env.IMAGE_TAG }}:${{ env.VERSION_TAG }}"
